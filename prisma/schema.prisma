// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id              String           @id @default(cuid())
  clerkId         String           @unique
  email           String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  profile         Profile?
  orders          Order[]
  appointments    Appointment[]
  reviews         Review[]
  cartItems       CartItem[]
  pointsTransactions PointTransaction[]
  userChallenges  UserChallenge[]
  referralsSent   Referral[]       @relation("ReferralSender")
  referralsReceived Referral[]     @relation("ReferralReceiver")
  
  // Social Feed Relations
  posts           SocialPost[]
  postLikes       PostLike[]
  postComments    PostComment[]
  commentLikes    CommentLike[]
  postSaves       PostSave[]
  postShares      PostShare[]
  
  // Following Relations
  followers       UserFollow[]     @relation("UserFollowing")
  following       UserFollow[]     @relation("UserFollower")
  
  // Notifications (Legacy)
  notifications   Notification[]
  notificationsFrom Notification[] @relation("NotificationFrom")
  
  // Stories
  stories         UserStory[]
  storyViews      StoryView[]
  storyHighlights StoryHighlight[]
  
  // Advanced Notifications
  notificationPreferences UserNotificationPreferences?
  sentNotifications SentNotification[]
  behaviorTracking UserBehaviorTracking?
  notificationSchedules NotificationSchedule[]
}

model Profile {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  
  firstName       String?
  lastName        String?
  phone           String?
  dateOfBirth     DateTime?
  skinType        String?
  skinConcerns    String[]
  allergies       String[]
  
  // Loyalty program
  loyaltyTierId   String?
  loyaltyTier     LoyaltyTier?     @relation(fields: [loyaltyTierId], references: [id])
  totalSpent      Decimal          @default(0)
  totalPoints     Int              @default(0)
  currentStreak   Int              @default(0)
  lastCheckIn     DateTime?
  
  // Preferences
  notifications   Boolean          @default(true)
  newsletter      Boolean          @default(true)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// E-commerce Models
model Product {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String
  shortDescription String?
  
  // Pricing
  price           Decimal
  compareAtPrice  Decimal?
  costPrice       Decimal?
  
  // Inventory
  sku             String           @unique
  barcode         String?
  stockQuantity   Int              @default(0)
  trackInventory  Boolean          @default(true)
  
  // Categories and organization
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id])
  brandId         String?
  brand           Brand?           @relation(fields: [brandId], references: [id])
  tags            String[]
  
  // Media
  images          String[]
  featuredImage   String?
  
  // Status
  status          ProductStatus    @default(DRAFT)
  featured        Boolean          @default(false)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  orderItems      OrderItem[]
  cartItems       CartItem[]
  reviews         Review[]
  postProducts    PostProduct[]
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Category {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?
  parentId        String?
  parent          Category?        @relation("CategoryParent", fields: [parentId], references: [id])
  children        Category[]       @relation("CategoryParent")
  image           String?
  
  products        Product[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Brand {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?
  logo            String?
  website         String?
  
  products        Product[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Orders
model Order {
  id              String           @id @default(cuid())
  orderNumber     String           @unique
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  // Pricing
  subtotal        Decimal
  tax             Decimal
  shipping        Decimal
  discount        Decimal          @default(0)
  total           Decimal
  
  // Status
  status          OrderStatus      @default(PENDING)
  paymentStatus   PaymentStatus    @default(PENDING)
  fulfillmentStatus FulfillmentStatus @default(UNFULFILLED)
  
  // Shipping
  shippingAddress Json
  billingAddress  Json
  shippingMethod  String?
  trackingNumber  String?
  
  // Payment
  paymentMethod   String?
  stripePaymentId String?
  
  // Points earned
  pointsEarned    Int              @default(0)
  
  notes           String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  items           OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum FulfillmentStatus {
  UNFULFILLED
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELLED
}

model OrderItem {
  id              String           @id @default(cuid())
  orderId         String
  order           Order            @relation(fields: [orderId], references: [id])
  productId       String
  product         Product          @relation(fields: [productId], references: [id])
  
  quantity        Int
  price           Decimal
  total           Decimal
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Cart
model CartItem {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  productId       String
  product         Product          @relation(fields: [productId], references: [id])
  
  quantity        Int              @default(1)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([userId, productId])
}

// Clinic Services
model Service {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String
  shortDescription String?
  
  duration        Int              // in minutes
  price           Decimal
  depositAmount   Decimal?
  
  categoryId      String
  category        ServiceCategory  @relation(fields: [categoryId], references: [id])
  
  // Restrictions
  requiresConsultation Boolean     @default(false)
  minimumAge      Int?
  
  // Media
  images          String[]
  featuredImage   String?
  
  // Status
  active          Boolean          @default(true)
  featured        Boolean          @default(false)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  appointments    Appointment[]
}

model ServiceCategory {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String?
  
  services        Service[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Appointments
model Appointment {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  serviceId       String
  service         Service          @relation(fields: [serviceId], references: [id])
  
  therapistId     String?
  therapist       Therapist?       @relation(fields: [therapistId], references: [id])
  
  dateTime        DateTime
  duration        Int              // in minutes
  
  status          AppointmentStatus @default(PENDING)
  
  notes           String?
  internalNotes   String?
  
  // Payment
  price           Decimal
  depositPaid     Boolean          @default(false)
  fullyPaid       Boolean          @default(false)
  
  // Points earned
  pointsEarned    Int              @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model Therapist {
  id              String           @id @default(cuid())
  name            String
  email           String           @unique
  phone           String?
  
  specialties     String[]
  bio             String?
  image           String?
  
  active          Boolean          @default(true)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  appointments    Appointment[]
}

// Reviews
model Review {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  productId       String
  product         Product          @relation(fields: [productId], references: [id])
  
  rating          Int              // 1-5
  title           String?
  comment         String
  
  helpful         Int              @default(0)
  verified        Boolean          @default(false)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([userId, productId])
}

// Loyalty & Gamification
model LoyaltyTier {
  id              String           @id @default(cuid())
  name            String           // Glow Starter, Radiance Member, etc
  slug            String           @unique
  
  minimumSpend    Decimal
  pointsMultiplier Float           @default(1.0)
  
  // Perks
  perks           String[]
  
  // Visual
  color           String?
  icon            String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  profiles        Profile[]
}

model Challenge {
  id              String           @id @default(cuid())
  title           String
  description     String
  
  type            ChallengeType
  target          Int              // target value to achieve
  points          Int              // points awarded on completion
  
  startDate       DateTime?
  endDate         DateTime?
  
  active          Boolean          @default(true)
  recurring       Boolean          @default(false)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  userChallenges  UserChallenge[]
  posts           SocialPost[]
}

enum ChallengeType {
  PURCHASE_AMOUNT
  PURCHASE_COUNT
  REVIEW_COUNT
  REFERRAL_COUNT
  STREAK_DAYS
  PRODUCT_CATEGORY
  SERVICE_BOOKING
}

model UserChallenge {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  challengeId     String
  challenge       Challenge        @relation(fields: [challengeId], references: [id])
  
  progress        Int              @default(0)
  completed       Boolean          @default(false)
  completedAt     DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@unique([userId, challengeId])
}

model PointTransaction {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  points          Int              // positive for earned, negative for redeemed
  type            PointTransactionType
  description     String
  
  // References
  orderId         String?
  appointmentId   String?
  challengeId     String?
  
  createdAt       DateTime         @default(now())
}

enum PointTransactionType {
  PURCHASE
  APPOINTMENT
  CHALLENGE
  REFERRAL
  REVIEW
  DAILY_CHECKIN
  REDEMPTION
  ADJUSTMENT
}

// Referrals
model Referral {
  id              String           @id @default(cuid())
  senderId        String
  sender          User             @relation("ReferralSender", fields: [senderId], references: [id])
  receiverId      String?
  receiver        User?            @relation("ReferralReceiver", fields: [receiverId], references: [id])
  
  code            String           @unique
  email           String?
  
  status          ReferralStatus   @default(PENDING)
  completedAt     DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

enum ReferralStatus {
  PENDING
  COMPLETED
  EXPIRED
}

// Social Feed Models
model SocialPost {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  type            PostType
  category        PostCategory
  
  caption         String
  hashtags        String[]
  location        String?
  
  // Content
  images          PostImage[]
  products        PostProduct[]
  
  // Engagement
  likes           PostLike[]
  comments        PostComment[]
  saves           PostSave[]
  shares          PostShare[]
  
  // Analytics
  views           Int              @default(0)
  engagementScore Float            @default(0)
  trendingScore   Float            @default(0)
  qualityScore    Float            @default(0)
  
  // Status
  isPrivate       Boolean          @default(false)
  isReported      Boolean          @default(false)
  isFeatured      Boolean          @default(false)
  moderationStatus ModerationStatus @default(APPROVED)
  
  // Challenge relation
  challengeId     String?
  challenge       Challenge?       @relation(fields: [challengeId], references: [id])
  
  // Notifications
  notifications   Notification[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([createdAt])
  @@index([engagementScore])
  @@index([trendingScore])
}

enum PostType {
  ROUTINE
  PROGRESS
  TIP
  REVIEW
  CHALLENGE
  BEFORE_AFTER
  TUTORIAL
}

enum PostCategory {
  SKINCARE
  MAKEUP
  WELLNESS
  LIFESTYLE
  PRODUCTS
  TREATMENTS
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  FLAGGED
}

model PostImage {
  id              String           @id @default(cuid())
  postId          String
  post            SocialPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  url             String
  alt             String?
  width           Int?
  height          Int?
  size            Int?             // file size in bytes
  order           Int              @default(0)
  isMain          Boolean          @default(false)
  
  createdAt       DateTime         @default(now())
  
  @@index([postId])
}

model PostProduct {
  id              String           @id @default(cuid())
  postId          String
  post            SocialPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  productId       String
  product         Product          @relation(fields: [productId], references: [id])
  
  order           Int              @default(0)
  
  createdAt       DateTime         @default(now())
  
  @@unique([postId, productId])
  @@index([postId])
}

model PostLike {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  postId          String
  post            SocialPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model PostComment {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  postId          String
  post            SocialPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  content         String
  
  // Threading support
  parentId        String?
  parent          PostComment?     @relation("CommentThread", fields: [parentId], references: [id])
  replies         PostComment[]    @relation("CommentThread")
  
  // Engagement
  likes           CommentLike[]
  
  // Status
  isEdited        Boolean          @default(false)
  isReported      Boolean          @default(false)
  moderationStatus ModerationStatus @default(APPROVED)
  
  // Notifications
  notifications   Notification[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model CommentLike {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  commentId       String
  comment         PostComment      @relation(fields: [commentId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@unique([userId, commentId])
  @@index([commentId])
}

model PostSave {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  postId          String
  post            SocialPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model PostShare {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  postId          String
  post            SocialPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  platform        String?          // instagram, facebook, twitter, etc
  
  createdAt       DateTime         @default(now())
  
  @@index([postId])
  @@index([userId])
}

// User Social Features
model UserFollow {
  id              String           @id @default(cuid())
  followerId      String
  follower        User             @relation("UserFollower", fields: [followerId], references: [id])
  followingId     String
  following       User             @relation("UserFollowing", fields: [followingId], references: [id])
  
  createdAt       DateTime         @default(now())
  
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

// Notifications
model Notification {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  type            NotificationType
  title           String
  message         String
  
  // References
  fromUserId      String?
  fromUser        User?            @relation("NotificationFrom", fields: [fromUserId], references: [id])
  postId          String?
  post            SocialPost?      @relation(fields: [postId], references: [id])
  commentId       String?
  comment         PostComment?     @relation(fields: [commentId], references: [id])
  
  isRead          Boolean          @default(false)
  
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  POST_MENTION
  COMMENT_REPLY
  CHALLENGE_COMPLETE
  FEATURED_POST
}

// User Stories (Instagram Stories equivalent)
model UserStory {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  type            StoryType        @default(IMAGE)
  content         String           // URL for image/video
  caption         String?
  
  // Engagement
  views           StoryView[]
  
  // Status
  isHighlight     Boolean          @default(false)
  highlightId     String?
  highlight       StoryHighlight?  @relation(fields: [highlightId], references: [id])
  
  expiresAt       DateTime         // Stories expire after 24 hours
  createdAt       DateTime         @default(now())
  
  @@index([userId])
  @@index([expiresAt])
}

enum StoryType {
  IMAGE
  VIDEO
}

model StoryView {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  storyId         String
  story           UserStory        @relation(fields: [storyId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime         @default(now())
  
  @@unique([userId, storyId])
  @@index([storyId])
}

model StoryHighlight {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  title           String
  coverImage      String?
  
  stories         UserStory[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([userId])
}

// Advanced Notification System
model NotificationTemplate {
  id              String           @id @default(cuid())
  name            String           @unique
  title           String
  body            String
  category        NotificationCategory
  trigger         NotificationTrigger
  
  // Targeting
  targetTiers     String[]         // Loyalty tiers to target
  targetSkinTypes String[]         // Skin types to target
  targetConcerns  String[]         // Skin concerns to target
  
  // Timing
  sendTime        String?          // HH:MM format
  daysOfWeek      Int[]            // 0-6 (Sunday-Saturday)
  timezoneOffset  Int?             // Offset from UTC
  
  // Content
  imageUrl        String?
  actionButtons   Json?            // Array of {text, action, deepLink}
  deepLink        String?
  
  // Settings
  isActive        Boolean          @default(true)
  priority        NotificationPriority @default(NORMAL)
  sound           String?
  badge           Boolean          @default(false)
  
  // Analytics
  openRate        Float            @default(0)
  clickRate       Float            @default(0)
  conversionRate  Float            @default(0)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  sentNotifications SentNotification[]
  abTests         NotificationABTest[]
  schedules       NotificationSchedule[]
}

enum NotificationCategory {
  ROUTINE_REMINDER
  GAMIFICATION
  BEHAVIORAL_TRIGGER
  PERSONALIZED_CONTENT
  APPOINTMENT
  PROMOTIONAL
  SYSTEM
}

enum NotificationTrigger {
  SCHEDULED
  BEHAVIOR_BASED
  EVENT_BASED
  LOCATION_BASED
  WEATHER_BASED
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model UserNotificationPreferences {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  
  // Category preferences
  routineReminders Boolean         @default(true)
  gamification    Boolean          @default(true)
  behavioralTriggers Boolean       @default(true)
  personalizedContent Boolean      @default(true)
  appointments    Boolean          @default(true)
  promotional     Boolean          @default(true)
  
  // Timing preferences
  morningTime     String           @default("07:30") // HH:MM
  eveningTime     String           @default("21:00") // HH:MM
  quietHoursStart String?          // HH:MM
  quietHoursEnd   String?          // HH:MM
  timezone        String           @default("UTC")
  
  // Frequency limits
  maxPerDay       Int              @default(3)
  maxPerWeek      Int              @default(15)
  
  // Device tokens
  fcmTokens       String[]         // Android FCM tokens
  apnsTokens      String[]         // iOS APNs tokens
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SentNotification {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  templateId      String
  template        NotificationTemplate @relation(fields: [templateId], references: [id])
  
  // Content sent
  title           String
  body            String
  imageUrl        String?
  deepLink        String?
  
  // Delivery info
  platform        String           // ios, android, web
  deviceToken     String
  sentAt          DateTime         @default(now())
  
  // Analytics
  delivered       Boolean          @default(false)
  opened          Boolean          @default(false)
  clicked         Boolean          @default(false)
  actionTaken     String?          // Which action was taken
  
  // Metadata
  abTestGroup     String?
  personalizedData Json?           // Data used for personalization
  
  @@index([userId])
  @@index([templateId])
  @@index([sentAt])
  @@index([platform])
}

model NotificationABTest {
  id              String           @id @default(cuid())
  templateId      String
  template        NotificationTemplate @relation(fields: [templateId], references: [id])
  
  name            String
  description     String?
  
  // Test configuration
  variants        Json             // Array of variants with different content
  trafficSplit    Json             // Percentage allocation per variant
  
  // Test period
  startDate       DateTime
  endDate         DateTime
  
  // Results
  totalSent       Int              @default(0)
  totalOpened     Int              @default(0)
  totalClicked    Int              @default(0)
  winningVariant  String?
  
  isActive        Boolean          @default(true)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([templateId])
  @@index([startDate, endDate])
}

model UserBehaviorTracking {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  
  // Activity tracking
  lastLoginAt     DateTime?
  lastRoutineAt   DateTime?
  lastBookingAt   DateTime?
  lastPurchaseAt  DateTime?
  lastPostAt      DateTime?
  
  // Routine completion
  morningRoutineStreak Int         @default(0)
  eveningRoutineStreak Int         @default(0)
  totalRoutinesCompleted Int       @default(0)
  
  // Engagement metrics
  sessionsThisWeek Int             @default(0)
  sessionDuration Float            @default(0) // Average in minutes
  pagesViewedPerSession Float      @default(0)
  
  // Preferences learned
  preferredLoginTime String?       // HH:MM
  preferredCategories String[]     // Skincare interests
  deviceType      String?          // ios/android/web
  
  // Notification response
  notificationOptOut Boolean       @default(false)
  avgNotificationResponse Float    @default(0) // 0-1 score
  
  updatedAt       DateTime         @updatedAt
  
  @@unique([userId])
  @@index([lastLoginAt])
  @@index([lastRoutineAt])
}

model NotificationSchedule {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id])
  templateId      String
  template        NotificationTemplate @relation(fields: [templateId], references: [id])
  
  // Scheduling
  scheduledFor    DateTime
  timeZone        String
  
  // Personalization data
  personalizedContent Json?
  
  // Status
  status          ScheduleStatus   @default(PENDING)
  attemptCount    Int              @default(0)
  lastAttemptAt   DateTime?
  errorMessage    String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
}

enum ScheduleStatus {
  PENDING
  SENT
  FAILED
  CANCELLED
}
